_BLOG(`In praise of Lua', `2023-04-23')

Even though I (as of writing) have no public projects in Lua, Lua has gained its spot in the list of of all-time favorite programming languages, and for good reason: it's small, it's simple, and man, can it be fast.

First off, it would be useful to mention how I got here, today: Lua. While I did start programming many, many years ago, just about a decade ago actually thanks to a YouTube video introducing me to Visual Basic scripts, and while it is true that I've been interested in programming ever since that fateful day, I owe a lot of my progress and growth as a software developer thanks to Lua as part of a mod of a certain block game. The _LINK(`ComputerCraft', `http://computercraft.info') mod introduced computers into Minecraft, and it gave me an extremely cozy environment to work and play around in, and I could very well say that because of ComputerCraft I am pursing programming as more than a hobby, but rather a whole career. While the start of my "programming era" started with that YouTube video, I could also argue that the first contact I had with ComputerCraft is of equal importance, if not more importance. Instead of watching message boxes appear on my screen, I watched the robots do what I told them to do.

The mod allowed me to do cool stuff in a world without consequences, because the world was just a sandbox full of blocks. I had no control of the environment in the real world, but I had it all in the game. Many, many hours were wasted programming stuff, and while the forums are very much dead, you can find some of my old projects I will not name out of shame. I was proud of it then, I am not now. Regardless, I enjoyed building programs in that environment because I could see my programs actually doing things because the mod had what they called a "turtle," which is essentially an autonomous computer that can equip any tool a normal player could. With that, I saved many hours mining and doing various miscellaneous tasks because I could automate it all. I would like to point out that this quote which I will paraphrase rung true then and still does today: "weeks of coding can save you hours of time." But I enjoyed it all.

But this isn't all about me and my origins, this is about Lua.

Lua is damn small and very portable. ANSI C might not mean anything to you, but that means that it works with anything that implements the spec. As of writing, the current reference version (5.4.4) clocks in at 25,000 lines of C. What I presume to be Python's core (the "Parser" and "Python" directories in CPython) meanwhile clocks in at 135,000, and everything else brings it up to 500,000. However, it would be good to point out that Python also has many more features and takes a more "batteries included" approach, which is why I deliberately counted what I presume to be the core language separately to give it more of a chance.

Lua doesn't really pack many features, but there are many libraries for one to use instead, and often the language is simple enough for you to implement what you want anyway which is more often than not better than bringing in any dependencies. Like I said above, Python is very much "batteries included" and Lua "batteries not included." This comes from Lua primarily being toted as a language to embed into one's programs, and Python not instead opting to present itself as a general programming language. But Lua can still be used as a standalone programming language (and well) and Python can still be used as a embedded scripting language (and well, just not as well as Lua!)

The syntax is small and very simple. If there was a language that a beginner could fully grasp with a day of studying, it would certainly not be Python, it would definitely be Lua. Python has all kinds of oddities, while with Lua, you can very much expect the same across the board. The syntax is in mostly in plain English which is an added bonus to a beginner. My hardly double-digit age brain could comprehend it well enough to churn out programs to aid me in doing tasks in Minecraft, so I would also have to guess that those that aren't school-aged children and with even less programming experience could pick it up at a much faster rate than I did many years ago.

Additionally it's small and simple enough that there exists many implementations of the language. We have the reference implementation, PUC Lua, then LuaJIT (Lua 5.1 with a JIT), LuaU (used in Roblox), LuaJ (used in ComputerCraft), MoonSharp (for .NET developers), Fengari (JavaScript, source port of PUC Lua), go-lua and gopher-lua (Go, go-lua is a source port of PUC Lua) and many more. Maybe I will write my own implementation someday just for laughs. Don't tempt me.

It's also really fast. _B(`Really fast.') While PUC Lua is still your traditional interpreter, it still often well surpasses Python in its performance. But PUC Lua is not what you're here for. You're here for LuaJIT, which is speedy even with the JIT turned off. Turn on the JIT and you're looking at something that can have performance _B(`on par') with C. In fact, a sizable portion of my desktop environment takes advantage of LuaJIT because it's fast and an interpreter. I get blazing fast performance without ever needing to compile anything, although, it may be a good idea to do that eventually.

If you're still not sold, the FFI interface is amazing to use too, and you can even abuse it to make your programs even faster. You want to use SQLite3? Then use it. You have the library there, just copy and paste some headers. Need Xlib for your _LINK(`status bar', `https://github.com/mca3/dotfiles/blob/master/.local/bin/statusline')? No problem. Just copy stuff from the headers. Want to control a Lua VM from Lua? Go ahead. If there's C bindings, there's a good chance you can get it working with LuaJIT.

I could keep going too, that's the worst part. I just love the language. It's so good. Use it. I'm going to write a project or two in it now.

Oh, and if you like the VM, enjoy the language, but want some more parenthesis, you will be interested in _LINK(`Fennel', `https://fennel-lang.org/'), a language with a lisp-like syntax that compiles to Lua. If you work in Clojure, then you will definitely be interested. I don't, but I like it.
